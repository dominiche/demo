#
# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

services:
  ca0:
    image: hyperledger/fabric-ca${IMAGE_TAG_FABRIC_CA}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start -n ca0 ${V11_IDENTITIES_ALLOWREMOVE} ${V11_AFFILIATIONS_ALLOWREMOVE} --registry.maxenrollments -1 --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/688cb2c7107e84fd883a22c9c416add1644bb8a4c6d19f827bba07d832def1e8_sk -b admin:adminpw ${ORG_HYPERLEDGER_FABRIC_SDKTEST_INTEGRATIONTESTS_CA_TLS} --tls.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --tls.keyfile /etc/hyperledger/fabric-ca-server-config/fcf776b02a05600408d0be9d9752afc59f64950b721cacb363b5b95a0fea6216_sk -d'
    volumes:
      - ./e2e-2Orgs/${FAB_CONFIG_GEN_VERS}/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config:ro
    container_name: ca_peerOrg1

  ca1:
    image: hyperledger/fabric-ca${IMAGE_TAG_FABRIC_CA}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
    ports:
      - "8054:7054"
    command: sh -c 'fabric-ca-server start --registry.maxenrollments -1 --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/859c9509c2f23d80838c1e796868053ae03bb06d5db2372a7c50339ec4bfe661_sk -b admin:adminpw ${ORG_HYPERLEDGER_FABRIC_SDKTEST_INTEGRATIONTESTS_CA_TLS} --tls.certfile /etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem --tls.keyfile /etc/hyperledger/fabric-ca-server-config/b59bba37975dafcc4a93984aa01d3d29b64894617db9e0c9a2d486b5273cbd27_sk -d'
    volumes:
      - ./e2e-2Orgs/${FAB_CONFIG_GEN_VERS}/crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config:ro
    container_name: ca_peerOrg2


  z1:
    extends:
      file: base.yaml
      service: zookeeper
    container_name: z1
    hostname: z1
    environment:
      # ID在集合中必须是唯一的并且应该有一个值在1-255之间。
      - ZOO_MY_ID=1
      # 组成ZK集合的服务器列表。客户端使用的列表必须与ZooKeeper服务器列表所拥有的每一个ZK服务器相匹配。
      # 有两个端口号：第一个是追随者用来连接领导者的，第二个是领导人选举。
      - ZOO_SERVERS=server.1=z1:2888:3888 server.2=z2:2888:3888 server.3=z3:2888:3888
#    volumes:
#        - /var/run/:/host/var/run/

  z2:
    extends:
      file: base.yaml
      service: zookeeper
    container_name: z2
    hostname: z2
    environment:
      - ZOO_MY_ID=2
      - ZOO_SERVERS=server.1=z1:2888:3888 server.2=z2:2888:3888 server.3=z3:2888:3888

  z3:
    extends:
      file: base.yaml
      service: zookeeper
    container_name: z3
    hostname: z3
    environment:
      - ZOO_MY_ID=3
      - ZOO_SERVERS=server.1=z1:2888:3888 server.2=z2:2888:3888 server.3=z3:2888:3888

  k1:
    extends:
      file: base.yaml
      service: kafka
    container_name: k1
    hostname: k1
    environment:
      - KAFKA_BROKER_ID=1
      # min.insync.replicas=M --- 设置一个M值（例如1<M<N，查看下面的default.replication.factor）
      # 数据提交时会写入至少M个副本（这些数据然后会被同步并且归属到in-sync副本集合或ISR）。
      # 其它情况，写入操作会返回一个错误。接下来：
      # 1. 如果channel写入的数据多达N-M个副本变的不可用，操作可以正常执行。
      # 2. 如果有更多的副本不可用，Kafka不可以维护一个有M数量的ISR集合，因此Kafka停止接收写操作。Channel只有当同步M个副本后才可以重新可以写。
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      # 指向Zookeeper节点的集合，其中包含ZK的集合。
      - KAFKA_ZOOKEEPER_CONNECT=z1:2181,z2:2181,z3:2181
    ports:
      - 9091:9092
    depends_on:
      - z1
      - z2
      - z3

  k2:
    extends:
      file: base.yaml
      service: kafka
    container_name: k2
    hostname: k2
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=z1:2181,z2:2181,z3:2181
    ports:
      - 9092:9092
    depends_on:
      - z1
      - z2
      - z3

  k3:
    extends:
      file: base.yaml
      service: kafka
    container_name: k3
    hostname: k3
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=z1:2181,z2:2181,z3:2181
    ports:
      - 9093:9092
    depends_on:
      - z1
      - z2
      - z3

  k4:
    extends:
      file: base.yaml
      service: kafka
    container_name: k4
    hostname: k4
    environment:
      - KAFKA_BROKER_ID=4
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=z1:2181,z2:2181,z3:2181
    ports:
      - 9094:9092
    depends_on:
      - z1
      - z2
      - z3

  orderer1.example.com:
    extends:
      file: base.yaml
      service: orderer.example.com
    container_name: orderer1.example.com
    volumes:
      - ./e2e-2Orgs/${FAB_CONFIG_GEN_VERS}/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/:/etc/hyperledger/msp/orderer:ro
    ports:
      - 7050:7050
    depends_on:
      - z1
      - z2
      - z3
      - k1
      - k2
      - k3
      - k4

  orderer2.example.com:
    extends:
      file: base.yaml
      service: orderer.example.com
    container_name: orderer2.example.com
    #environment:
      #- ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      #- ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      #- ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      #- ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      #- ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    volumes:
      - ./e2e-2Orgs/${FAB_CONFIG_GEN_VERS}/crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/:/etc/hyperledger/msp/orderer:ro
    ports:
      - 7049:7050
    depends_on:
      - z1
      - z2
      - z3
      - k1
      - k2
      - k3
      - k4

  orderer3.example.com:
    extends:
      file: base.yaml
      service: orderer.example.com
    container_name: orderer3.example.com
    volumes:
      - ./e2e-2Orgs/${FAB_CONFIG_GEN_VERS}/crypto-config/ordererOrganizations/example.com/orderers/orderer3.example.com/:/etc/hyperledger/msp/orderer:ro
    ports:
      - 7048:7050
    depends_on:
      - z1
      - z2
      - z3
      - k1
      - k2
      - k3
      - k4

  peer0.org1.example.com:
    extends:
      file: base.yaml
      service: peer-base
    container_name: peer0.org1.example.com
    environment:
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
#      - CORE_PEER_GOSSIP_ORGLEADER=true
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
      - /var/run/:/host/var/run/
      - ./e2e-2Orgs/${FAB_CONFIG_GEN_VERS}/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/:/etc/hyperledger/msp/peer:ro
    ports:
      - 7051:7051
      - 7053:7053
    depends_on:
      - orderer1.example.com
      - orderer2.example.com
      - orderer3.example.com

  peer1.org1.example.com:
    extends:
      file: base.yaml
      service: peer-base
    container_name: peer1.org1.example.com
    environment:
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051
#      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
      - /var/run/:/host/var/run/
      - ./e2e-2Orgs/${FAB_CONFIG_GEN_VERS}/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/:/etc/hyperledger/msp/peer:ro
    ports:
      - 7056:7051
      - 7058:7053
    depends_on:
      - orderer1.example.com
      - orderer2.example.com
      - orderer3.example.com

  peer0.org2.example.com:
    extends:
      file: base.yaml
      service: peer-base
    container_name: peer0.org2.example.com
    environment:
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:8051
#      - CORE_PEER_GOSSIP_ORGLEADER=true
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
      - /var/run/:/host/var/run/
      - ./e2e-2Orgs/${FAB_CONFIG_GEN_VERS}/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/:/etc/hyperledger/msp/peer:ro
    ports:
      - 8051:7051
      - 8053:7053
    depends_on:
      - orderer1.example.com
      - orderer2.example.com
      - orderer3.example.com

  peer1.org2.example.com:
    extends:
      file: base.yaml
      service: peer-base
    container_name: peer1.org2.example.com
    environment:
      - CORE_PEER_ID=peer1.org2.example.com
      - CORE_PEER_ADDRESS=peer1.org2.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:8051
#      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:8051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
      - /var/run/:/host/var/run/
      - ./e2e-2Orgs/${FAB_CONFIG_GEN_VERS}/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/:/etc/hyperledger/msp/peer:ro
    ports:
       - 8056:7051
       - 8058:7053
    depends_on:
      - orderer1.example.com
      - orderer2.example.com
      - orderer3.example.com

#  cli:
#    container_name: cli
#    image: hyperledger/fabric-tools
#    tty: true
#    environment:
#      - GOPATH=/opt/gopath
#      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#      - CORE_LOGGING_LEVEL=DEBUG
#      - CORE_PEER_ID=cli
#      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
#      - CORE_PEER_LOCALMSPID=Org1MSP
#      - CORE_PEER_TLS_ENABLED=false
#      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
#      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
#      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
#      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
#    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
#    #command: /bin/bash -c 'sleep 30; ./scripts/script.sh ${CHANNEL_NAME}; sleep $TIMEOUT'
#    volumes:
#        - /var/run/:/host/var/run/
#        - ../chaincode/:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode
#        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
#        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
#        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
#    depends_on:
#      - orderer1.example.com
#      - orderer2.example.com
#      - orderer3.example.com
#      - peer0.org1.example.com
#      - peer1.org1.example.com
#      - peer0.org2.example.com
#      - peer1.org2.example.com

#  configtxlator:
#      image: hyperledger/fabric-tools${IMAGE_TAG_FABRIC}
#      ports:
#        - "7059:7059"
#      command: /usr/local/bin/configtxlator start
#      container_name: configtxlator
#
#  ccenv:
#    image: hyperledger/fabric-ccenv${IMAGE_TAG_FABRIC}